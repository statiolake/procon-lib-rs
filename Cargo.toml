[package]
name = "procon-lib"
version = "0.1.0"
authors = ["statiolake <statiolake@gmail.com>"]
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[features]
default = ["atc-2020"]

atc-2020 = ["rust-142", "crates-atc-2020"]

rust-131 = []
rust-140 = ["rust-131"]
rust-141 = ["rust-140"]
rust-142 = ["rust-141"]

crates-atc-2020 = [
    "num",
    "num-bigint",
    "num-complex",
    "num-integer",
    "num-iter",
    "num-rational",
    "num-traits",
    "num-derive",
    "ndarray",
    "nalgebra",
    "alga",
    "libm",
    "rand",
    "getrandom",
    "rand_chacha",
    "rand_core",
    "rand_hc",
    "rand_pcg",
    "rand_distr",
    "petgraph",
    "indexmap",
    "regex",
    "lazy_static",
    "ordered-float",
    "ascii",
    "permutohedron",
    "superslice",
    "itertools",
    "itertools-num",
    "maplit",
    "either",
    "im-rc",
    "fixedbitset",
    "proconio",
    "rustc-hash",
    "smallvec",
]

[dependencies]
# AtCoder 2020年言語アップデート以降に使用できるクレート。
# 次のページに各クレートについての細かい紹介があります。
# https://github.com/rust-lang-ja/atcoder-rust-resources/wiki/2020-Update

# 数値型の抽象化、多倍長整数、複素数、分数、及び整数型の拡張
num = { version = "=0.2.1", optional = true }
num-bigint = { version = "=0.2.6", optional = true }
num-complex = { version = "=0.2.4", optional = true }
num-integer = { version = "=0.1.42", optional = true }
num-iter = { version = "=0.1.40", optional = true }
num-rational = { version = "=0.2.4", optional = true }
num-traits = { version = "=0.2.11", optional = true }

# `num-traits`の自動実装
num-derive = { version = "=0.3.0", optional = true }

# NumPyの`ndarray`のような多次元配列
ndarray = { version = "=0.13.0", optional = true }

# 線形代数
nalgebra = { version = "=0.20.0", optional = true }

# (線形)代数の抽象化
alga = { version = "=0.9.3", optional = true }

# libmのRust実装
libm = { version = "=0.2.1", optional = true }

# 乱数
rand = { version = "=0.7.3", features = ["small_rng"], optional = true }
getrandom = { version = "=0.1.14", optional = true }
rand_chacha = { version = "=0.2.2", optional = true }
rand_core = { version = "=0.5.1", optional = true }
rand_hc = { version = "=0.2.0", optional = true }
rand_pcg = { version = "=0.2.1", optional = true }

# 乱数の分布の追加
rand_distr = { version = "=0.2.2", optional = true }

# グラフ
petgraph = { version = "=0.5.0", optional = true }

# 挿入順を保持するhash table
indexmap = { version = "=1.3.2", optional = true }

# 正規表現
regex = { version = "=1.3.6", optional = true }

# staticアイテムの遅延初期化
lazy_static = { version = "=1.4.0", optional = true }

# `NotNan<f64>`, `OrderedFloat<f64>`
ordered-float = { version = "=1.0.2", optional = true }

# ASCII文字列
ascii = { version = "=1.0.0", optional = true }

# permutation
permutohedron = { version = "=0.2.4", optional = true }

# スライスの拡張
superslice = { version = "=1.0.0", optional = true }

# イテレータの拡張
itertools = { version = "=0.9.0", optional = true }

# イテレータの拡張（一次元累積和と浮動小数点数の等差数列）
itertools-num = { version = "=0.1.3", optional = true }

# `BTreeMap`, `BTreeSet`, `HashMap`, `HashSet`のリテラル用マクロ
maplit = { version = "=1.0.2", optional = true }

# 即席enum `Either<L, R>`
either = { version = "=1.5.3", optional = true }

# `BTreeMap`, `BTreeSet`, `HashMap`, `HashSet`, `Vec`の永続データ構造版
im-rc = { version = "=14.3.0", optional = true }

# 可変長bit set
fixedbitset = { version = "=0.2.0", optional = true }

# 可変長bit set
#bitset-fixed = "=0.1.0"

# 競技プログラミングの入出力サポートその1
proconio = { version = "=0.3.6", features = ["derive"], optional = true }

# 競技プログラミングの入出力サポートその2
#text_io = "=0.1.8"

# 競技プログラミングの入出力サポートその3
#whiteread = "=0.5.0"

# 高速なハッシュ関数
rustc-hash = { version = "=1.1.0", optional = true }

# ある長さまでは要素を「直に」持つ可変長配列
smallvec = { version = "=1.2.0", optional = true }
